---
export interface Props {
	courses: Array<{
		name: string;
		slug: string;
		suburb: string;
		thumbnail?: string;
		location?: { lat: number; lng: number };
	}>;
}

const { courses } = Astro.props;
const coursesWithLocation = courses.filter(c => c.location);
---

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<div id="course-map" class="w-full h-[480px] rounded-lg"></div>

<style>
	/* Custom popup styling */
	:global(.leaflet-popup-content-wrapper) {
		border-radius: 8px;
	}
	:global(.leaflet-popup-content) {
		margin: 12px 16px;
		font-family: inherit;
	}
	:global(.leaflet-popup-content h3) {
		margin: 0 0 8px 0;
		font-size: 16px;
		font-weight: 600;
		color: #1e3a8a;
	}
	:global(.leaflet-popup-content a) {
		color: #2563eb;
		text-decoration: none;
		font-weight: 500;
	}
	:global(.leaflet-popup-content a:hover) {
		text-decoration: underline;
	}
</style>

<script define:vars={{ coursesWithLocation }}>
	// Load Leaflet dynamically
	const script = document.createElement('script');
	script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
	script.onload = () => {
		// Initialize map
		const map = L.map('course-map');

		// Add OpenStreetMap standard tiles
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
			maxZoom: 19
		}).addTo(map);

		// Create custom disc golf icon
		const discIcon = L.divIcon({
			className: 'custom-disc-marker',
			html: `<div style="
				font-size: 32px;
				filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
			">ü•è</div>`,
			iconSize: [32, 32],
			iconAnchor: [16, 16],
			popupAnchor: [0, -16]
		});

		// Add markers for each course
		coursesWithLocation.forEach(course => {
			const marker = L.marker([course.location.lat, course.location.lng], {
				icon: discIcon
			}).addTo(map);

			const popupContent = `
				<div>
					<h3 style="margin: 0;"><a href="/courses/${course.slug}">${course.name}</a></h3>
					<p style="margin: 4px 0 0 0; color: #6b7280; font-size: 14px;">${course.suburb}</p>
				</div>
			`;

			marker.bindPopup(popupContent, {
				maxWidth: 280,
				closeButton: false,
				autoPan: false
			});

			const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

			// Open popup on hover (desktop only)
			if (!isTouchDevice) {
				marker.on('mouseover', function() {
					this.openPopup();
				});
			}

			// Click behavior: different for desktop vs mobile
			let clickTimer = null;
			marker.on('click', function(e) {
				if (isTouchDevice) {
					// Mobile: first click opens popup, second click navigates
					if (this.isPopupOpen()) {
						window.location.href = `/courses/${course.slug}`;
					} else {
						this.openPopup();
						// Auto-close after delay if user doesn't interact
						if (clickTimer) clearTimeout(clickTimer);
						clickTimer = setTimeout(() => {
							if (!this._hoveredPopup) {
								this.closePopup();
							}
						}, 3000);
					}
				} else {
					// Desktop: click navigates immediately (hover already shows popup)
					window.location.href = `/courses/${course.slug}`;
				}
			});

			// Close popup when mouse leaves both marker and popup
			marker.on('mouseout', function(e) {
				const popup = this.getPopup();
				const popupElement = popup.getElement();

				// Don't close if moving to the popup
				if (popupElement && popupElement.matches(':hover')) {
					return;
				}

				setTimeout(() => {
					if (popupElement && !popupElement.matches(':hover') && !this._icon.matches(':hover')) {
						this.closePopup();
					}
				}, 100);
			});

			// Keep popup open when hovering over it
			marker.on('popupopen', function() {
				const popup = this.getPopup();
				const popupElement = popup.getElement();

				if (popupElement) {
					popupElement.addEventListener('mouseover', () => {
						this._hoveredPopup = true;
					});

					popupElement.addEventListener('mouseout', () => {
						this._hoveredPopup = false;
						setTimeout(() => {
							if (!this._hoveredPopup && !this._icon.matches(':hover')) {
								this.closePopup();
							}
						}, 100);
					});
				}
			});
		});

		// Set explicit bounds to show Melbourne area with all courses
		// Coordinates roughly encompass all Melbourne disc golf courses
		const bounds = L.latLngBounds(
			[-37.89, 144.54],  // Southwest corner (bottom-left)
			[-37.79, 145.68]  // Northeast corner (top-right)
		);
		map.fitBounds(bounds);
	};
	document.head.appendChild(script);
</script>
